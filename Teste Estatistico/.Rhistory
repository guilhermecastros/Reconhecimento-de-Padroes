library('plot3D')
library('e1071')
library(simone)
rm(list=ls())
## load the data set
data(USArrests)
summary(USArrests)
X <- data.matrix(USArrests)
X[is.na(X)] <- 0
meanx <- colMeans(X)
Xs<- X - t(replicate(dim(X)[1],meanx))
S<-cov(Xs)
eigS<-eigen(S)
plot(c(1 : ncol(X)),eigS$values,type='b',xlab='Eixo PCA',ylab='Autovalor')
projX<-Xs %*% eigS$vectors
maxX <- max(max(projX[,1]),max(projX[,1]))
minX <- min(min(projX[,1]),min(projX[,1]))
maxY <- max(max(projX[,2]),max(projX[,2]))
minY <- min(min(projX[,2]),min(projX[,2]))
plot(projX[,1],projX[,2], col='blue', xlim=c(-1 + minX,maxX), ylim=c(-1 + minY,maxY), xlab ='', ylab='')
points3d(projX[,1], projX[,2], projX[,3], col = "blue", size = 6, xlab="x", ylab="Y", zlab = "", add=T)
axes3d()
calcCumulativeProportionVarianceExplained <- function(X, nComponents) {
cumVarExp <- 0
for (component in 1:nComponents) {
cumVarExp <- cumVarExp + calcVarianceExplained(X, component)
}
cumVarExp / calcTotalVariance(X)
}
calcVarianceExplained <- function(X, component) {
sum((projX[, component]) ^ 2) / nrow(X)
}
explainedVariances <- c()
for (nComponents in 1:ncol(X)) {
expVar <- calcCumulativeProportionVarianceExplained(X, nComponents)
explainedVariances <- c(explainedVariances, expVar)
}
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício - PCA/USArrestsPCA.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício - PCA/USArrestsPCA.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício - PCA/USArrestsPCA.R', echo=TRUE)
explainedVariances
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício - PCA/USArrestsPCA.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício - PCA/USArrestsPCA.R', echo=TRUE)
data()
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
DTrain
DTrain$-1
DTrain$
1
XTrain <- rbind(xc1Train,xc2Train)
XTrain[:,]
XTrain[:,1]
XTrain[,1]
XTrain[1,]
createFolds(X,10)
a<-createFolds(X,10)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
D[vizinhos]
vizinhos
distancias
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
XTrain
KNN(XTest[j,],XTrain,K, DTrain)
KNN(XTest[j,],XTrain,K, DTrain)
XTest[j,]
XTrain
K
Dtrain
Dtrain
K <- 10
XResult <- rep(0,length(XTrain))
rm(list=ls())
library('bmp')
library('rgl')
library('caret')
library('mlbench')
library('RSNNS')
library('mclust')
library('plot3D')
library('e1071')
rm(list=ls())
data(BreastCancer)
summary(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- matrix(0, nrow = dim(X)[1], ncol = 2)
Y[which(BreastCancer$Class == 'benign'),1] <- 1
Y[which(BreastCancer$Class == 'malignant'),2] <- 1
N <- 10
MSE <- rep(0,N)
SD <- rep(0,N)
percentage <- rep(0,N)
xc1 <- X[which(BreastCancer$Class == 'benign'),]
xc2 <- X[which(BreastCancer$Class == 'malignant'),]
index <- sample(dim(xc1)[1])
numOfTrainXC1 <- round(dim(xc1)[1]*0.7)
numOfTestXC1 <- round(dim(xc1)[1]*0.3)
xc1Test <- xc1[index[1:numOfTestXC1],]
xc1Train <- xc1[index[(numOfTestXC1 + 1): dim(xc1)[1]],]
index <- sample(dim(xc2)[1])
numOfTrainXC2 <- round(dim(xc2)[1]*0.7)
numOfTestXC2 <- round(dim(xc2)[1]*0.3)
xc2Test <- xc2[index[1:numOfTestXC2],]
xc2Train <- xc2[index[(numOfTestXC2 + 1):dim(xc2)[1]],]
# formatando base de dados
XTest <-  rbind(xc1Test,xc2Test)
DTrain <- c(rep(-1,nrow(xc1Train)),rep(1,nrow(xc2Train)))
DTrain <- as.factor(DTrain)
XTrain <- rbind(xc1Train,xc2Train)
KNN <- function(point,data,K,D){
X <- rbind(point,data)
distancias <- dist(X, method = "euclidean", diag = FALSE, upper = TRUE)
distancias <- as.matrix(distancias)
distancias <- distancias[,-1]
vizinhos <- order(distancias[1,])[1:K]
#classificacao
resultado <- sum(D[vizinhos])
if(resultado >= 0)
{
return (-1)
}
if(resultado < 0)
{
return (1)
}
}
K <- 10
XResult <- rep(0,length(XTrain))
length(XTrain)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
rep(0,nrow(XTrain))
nrow(XTrain)
c(1:nrow(XTrain))
DTrain
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
DTrain
K
XTest[j,]
XTrain
K
distancias
distancias
KNN(XTest[j,],XTrain,K, DTrain)
KNN(XTest[j,],XTrain,K, DTrain)
vizinhos
KNN(XTest[j,],XTrain,K, DTrain)
distancias
View(distancias)
View(vizinhos <- order(distancias[1,])[1:K])
sum(D[vizinhos])
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
XResult
XTest
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
XResult
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
View(percentage[i])
View(percentage[1])
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
XResult
DTest
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
install.packages("class")
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
XResult
DTest
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício KNN/main.R', echo=TRUE)
DTest
XResult
foldList[1]
foldList < createFolds(X,10)
install.packages("caret")
install.packages("caret")
foldList < createFolds(X,10)
createFolds(X,10)
X
createFolds(X,10)
library('caret')
createFolds(X,10)
foldList < createFolds(X,10)
createFolds(X,10)
a <- createFolds(X,10)
a
a[1]
a[2]
a[3]
a[4]
a[5]
a[6]
length(a)
array <- c(1,2,3,4,5,6,7,8,9,10)
array
array
which(array != i)
which(array != 1)
array <- c(1,2,3,4,5,6,7,8,9,10)
DataTrain <- X[which(array != i)]
array <- c(1,2,3,4,5,6,7,8,9,10)
DataTrain <- X[which(array != 2)]
array <- c(1,2,3,4,5,6,7,8,9,10)
DataTrain <- foldList[which(array != 2)]
foldList < createFolds(X,10)
foldList
foldList <- list()
foldList < createFolds(X,10)
array <- c(1,2,3,4,5,6,7,8,9,10)
DataTrain <- foldList[which(array != 2)]
DataTrain
which(array != 2)
foldList[1]
foldList < createFolds(X,10)
X
foldList <- list()
foldList <- createFolds(X,10)
array <- c(1,2,3,4,5,6,7,8,9,10)
DataTrain <- foldList[which(array != 2)]
DataTrain <- c(foldList[which(array != i)])
DataTrain <- c(foldList[which(array != 2)])
X
createFolds(X,10)
foldList <- list()
foldList <- createFolds(X, k = 10)
foldList[1]
foldList <- list()
foldList <- createFolds(1:nrow(X), k = 10)
foldList$1Fold10
foldList$1Fold1
foldList$1Fold01
foldList$Fold01
DataTrain <- X[which(1:nrow(X) != foldList[1])]
DataTrain <- X[which(1:nrow(X) != foldList[1])]
X[which(1:nrow(X) != foldList[i])]
X[which(1:nrow(X) != foldList[1])]
foldList[1]
1:nrow(X)
1:nrow(X) != foldList[i]
1:nrow(X) != foldList[1]
1:nrow(X) != foldList[2]
1:nrow(X) != foldList[1]
foldList[1]
foldList[[1]]
X[which(1:nrow(X) != foldList[[1]])]
indexes <- 1:nrow(X)
indexes <- indexes[!foldList[[1]]]
indexes
1:nrow(X)
indexes <- 1:nrow(X)
indexes
!foldList[[i]]
!foldList[[1]]
indexes <- 1:nrow(X)
indexes
1:length(foldList)
indexes <- 1:length(foldList)
[which(indexes != i)
[which(indexes != i)]
which(indexes != i)
which(indexes != 1)
foldList[[1,2,3]]
indexes <- 1:length(foldList)
#filtrar a lista
DataTrain <- foldList[[which(indexes != 1)]]
c([1,2],[3])
foldList[[which(indexes != 1)]]
which(indexes != 1)]
which(indexes != 1)
foldList[2]
foldList[[2]
]
foldList[[2]]
c(foldList[[2]],foldList[[3]])
c(foldList[[2]],foldList[[3]])c(1:length(iFold)
c(1:length(iFold)
)
iFold <- 1:length(foldList)
iFold <- which(iFold != i)
iFold <- which(iFold != 1)
iFold
length(iFold)
iFold[1]
foldList[[2]]
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
i <- 1
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
XResult[j] <- knn(XTrain,XTest[j,],DTrain,K)
}
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain
DataTrain
View(DataTrain)
rep(null,1)
rep('',1)
rep(0,0)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(null,1)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
foldList <- list()
foldList <- createFolds(1:nrow(X), k = 10)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
View(X)
Y <- matrix(0, nrow = dim(X)[1], ncol = 2)
Y[which(BreastCancer$Class == 'benign'),1] <- 1
Y[which(BreastCancer$Class == 'malignant'),2] <- 1
Y
Y <- as.numeric(BreastCancer$Class)
BreastCancer
Data()
data()
rm(list=ls())
library('class')
library('caret')
library('mlbench')
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
evalK <- function(K) {
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(DTrain == DTest))/length(DTest))
}
bestResult <- max(results)
return (bestResult)
}
evalK(1)
DTrain
evalK <- function(K) {
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(tempResult == DTest))/length(DTest))
}
bestResult <- max(results)
return (bestResult)
}
evalK(1)
evalK
evalK(1)
K <- 1
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(tempResult == DTest))/length(DTest))
K <- 1
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(tempResult == DTest))/length(DTest))
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico/main.R', echo=TRUE)
setwd("C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico")
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico/main.R', echo=TRUE)
View(dados)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Teste Estatistico/main.R', echo=TRUE)
