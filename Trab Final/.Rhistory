childrenCost[sample(1:length(cost),1)]
childrenCost[sample(1:length(cost),1)]
childrenCost[sample(1:length(cost),1)]
sample(1:length(cost),1)
sample(1:length(cost),1)
sample(1:length(cost),1)
sample(1:length(cost),1)
sample(1:length(cost),1)
childrenCost[sample(1:length(cost),1)
c
childrenCost
childrenCost <- rep(0, length(cost))
childrenCost
childrenCost[sample(1:length(cost),1)] <- 1
childrenCost
childrenGamma
childrenGamma <- rep(0, length(gamma))
childrenGamma[sample(1:length(gamma),1)] <- 1
childrenGamma
childrenFitness <- calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenFitness
childrenFitness
childrenFitness
if(childrenFitness > min(fathersFitness))
{
substituteIndex <- which(fathersFitness == min(fathersFitness))[1]
costFather[substituteIndex,] <- childrenCost
gammaFather[substituteIndex,] <- childrenGamma
fathersFitness[substituteIndex] <- childrenFitness
}
childrenFitness
min(fathersFitness)
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
childrenFitness <- calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenFitness
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, rbind(XValidation, XTest), rbind(DValidation, DTest))
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, rbind(XValidation, XTest), rbind(DValidation, DTest))
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, rbind(XValidation, XTest), rbind(DValidation, DTest))
svm.model <- svm(DTrain ~ ., data = XTrain, cost = cost, gamma = gamma)
svm.pred <- predict(svm.model, XTest)
as.numeric(as.character(svm.pred))
Pxc
Pxc <- as.numeric(as.character(svm.pred))
XTest
DTest
DTrain
cost
gamma
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
sample(1:10, 1) <= probMutation*10
#Eval mutation
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
#Eval mutation
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
#Eval mutation
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
#Eval mutation
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
#Eval mutation
if(sample(1:10, 1) <= probMutation*10)
{
childrenCost <- rep(0, length(cost))
childrenGamma <- rep(0, length(gamma))
childrenCost[sample(1:length(cost),1)] <- 1
childrenGamma[sample(1:length(gamma),1)] <- 1
}
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
calcFitness(childrenCost, childrenGamma, DTrain, XTrain, XValidation, DValidation)
DTrain <- Y[index[(dimXTest + 1): (dimXTrain + dimXTest)],]
DTrain
View(XTrain)
View(BreastCancer)
View(xc)
View(XTrain)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
View(XTrain)
View(DTrain)
DTrain
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
View(XTrain)
Dtrain
DTrain
rm(list=ls())
library('bmp')
library('rgl')
library('caret')
library('mlbench')
library('RSNNS')
library('mclust')
library('plot3D')
library('e1071')
library('class')
library('caTools')
source('createFirstCostGenearation.R')
source('createFirstGammaGenearation.R')
source('calcFitness.R')
source('getDataset.R')
library('readr')
library('DMwR')
# 1 - diabetes
# 2 - BreastCancer
data <- getDataset("BreastCancer")
xc <- data[[1]]
Y <- data[[2]]
xc <- cbind(xc,Y)
View(xc)
ncol(xc)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
rm(list=ls())
library('bmp')
library('rgl')
library('caret')
library('mlbench')
library('RSNNS')
library('mclust')
library('plot3D')
library('e1071')
library('class')
library('caTools')
source('createFirstCostGenearation.R')
source('createFirstGammaGenearation.R')
source('calcFitness.R')
source('getDataset.R')
library('readr')
library('DMwR')
# 1 - diabetes
# 2 - BreastCancer
data <- getDataset("BreastCancer")
xc <- data[[1]]
Y <- data[[2]]
xc <- cbind(xc,Y)
#data(BreastCancer)
#X <- data.matrix(BreastCancer[,2:10])
#X[is.na(X)] <- 0
#Y <- matrix(0, nrow = dim(X)[1], ncol = 2)
#Y[which(BreastCancer$Class == 'benign'),1] <- 1
#Y[which(BreastCancer$Class == 'malignant'),2] <- 1
#xc1 <- X[which(BreastCancer$Class == 'benign'),]
#xc2 <- X[which(BreastCancer$Class == 'malignant'),]
#########################################
index <- sample(dim(xc)[1])
dimXTrain <- round(dim(xc)[1]*0.6)
dimXTest <- round(dim(xc)[1]*0.2)
dimXValidation <- round(dim(xc)[1]*0.2)
XTest <- xc[index[1:dimXTest],1:ncol(xc)]
DTest <- xc[,ncol(xc)]#Y[index[1:dimXTest],]
XTest <- XTest[,1:ncol(xc) - 1]
XTrain <- xc[index[(dimXTest + 1): (dimXTrain + dimXTest)],1:ncol(xc)]
DTrain <- xc[,ncol(xc)]#Y[index[(dimXTest + 1): (dimXTrain + dimXTest)],]
XTrain <- XTrain[,1:ncol(xc) - 1]
XValidation <- xc[index[((dimXTest + dimXTrain) + 1): dim(xc)[1]],1:ncol(xc)]
DValidation <- xc[,ncol(xc)]#Y[index[((dimXTest + dimXTrain) + 1): dim(xc)[1]],]
XValidation <- XValidation[,1:ncol(xc) - 1]
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
View(XTest)
View(XTest)
View(XTrain)
View(xc)
View(xc)
View(BreastCancer)
ncol(xc)data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
View(X)
Y <- matrix(0, nrow = dim(X)[1], ncol = 1)
View(Y)
Y[which(BreastCancer$Class == 'benign'),1] <- 1
View(Y)
Y[which(BreastCancer$Class == 'malignant'),1] <- -1
xc1
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- matrix(0, nrow = dim(X)[1], ncol = 1)
Y[which(BreastCancer$Class == 'benign'),1] <- 1
Y[which(BreastCancer$Class == 'malignant'),1] <- -1
xc <- X
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
View(X)
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- matrix(0, nrow = dim(X)[1], ncol = 1)
Y[which(BreastCancer$Class == 'benign'),1] <- 1
Y[which(BreastCancer$Class == 'malignant'),1] <- -1
xc <- X
View(xc)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
fathersFitness
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
XTest
View(XTest)
DTest
View(diabetes)
View(XTest)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
fathersFitness
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/calcFitness.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Trab Final/main.R', echo=TRUE)
rm(list=ls())
library('bmp')
library('rgl')
library('caret')
library('mlbench')
library('RSNNS')
library('mclust')
library('plot3D')
library('e1071')
library('class')
library('caTools')
source('evalByAcc.R')
source('evalByAuc.R')
library('readr')
library('DMwR')
dataset <- read.csv("BaseCar", skip=1, header = FALSE)
data <- dataset[,2:8]
#data$V8 <- as.factor(data$V8)
#data <- SMOTE(V8 ~ ., data, perc.over = 2000, perc.under=100)
#table(data$V8)
X <- data.matrix(data[,1:6])
X[is.na(X)] <- 0
Y <-  data.matrix(data[,7])
#N <- 100
#MSE <- rep(0,N)
#SD <- rep(0,N)
#percentage <- rep(0,N)
xc1 <- X[which(Y == 0),]
xc2 <- X[which(Y == 1),]
#Usar SVM
index <- sample(dim(xc1)[1])
numOfTrainXC1 <- round(dim(xc1)[1]*0.7)
numOfTestXC1 <- round(dim(xc1)[1]*0.3)
xc1Test <- xc1[index[1:numOfTestXC1],]
xc1Train <- xc1[index[(numOfTestXC1 + 1): dim(xc1)[1]],]
index <- sample(dim(xc2)[1])
numOfTrainXC2 <- round(dim(xc2)[1]*0.7)
numOfTestXC2 <- round(dim(xc2)[1]*0.3)
xc2Test <- xc2[index[1:numOfTestXC2],]
xc2Train <- xc2[index[(numOfTestXC2 + 1):dim(xc2)[1]],]
# formatando base de dados
XTest <-  rbind(xc1Test,xc2Test)
DTest <- c(rep(1,nrow(xc1Test)),rep(-1,nrow(xc2Test)))
DTest <- as.factor(DTest)
DTrain <- c(rep(1,nrow(xc1Train)),rep(-1,nrow(xc2Train)))
DTrain <- as.factor(DTrain)
#DTrain <- as.factor(DTrain)
XTrain <- rbind(xc1Train,xc2Train)
foldList <- list()
foldList <- createFolds(1:nrow(XTrain), 10)
N <- 100
cost <- c(2^-5,2^-4,2^-3,2^-2,2^-1,2^0,2^1,2^2,2^3,2^4,2^5,2^6,2^7,2^8,2^9,2^10,2^11,2^12,2^13,2^14,2^15)
gamma <- c(2^-15,2^-14,2^-13,2^-12,2^-11,2^-10,2^-9,2^-8,2^-7,2^-6,2^-5,2^-4,2^-3,2^-2,2^-1,2^0,2^1,2^2,2^3)
accResult <- matrix(0, nrow = length(cost), ncol = length(gamma))
aucResult <- matrix(0, nrow = length(cost), ncol = length(gamma))
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
#REALIZAR 30 VEZES PARA O DATA DE TESTE E FAZER A MÉDIA PARA SABER QUAL O MELHOR
accResult[i,j] <- evalByAcc(XTrain, DTrain, foldList, cost[i], gamma[j])
aucResult[i,j] <- evalByAuc(XTrain, DTrain, foldList, cost[i], gamma[j])
}
}
svm.model <- svm(DTrain ~ ., data = XTrain, cost = 0.5, gamma = 1)
svm.pred <- predict(svm.model, XTest)
Pxc <- as.numeric(as.character(svm.pred))
#results[i] <- colAUC(svm.pred,DTest, plotROC=FALSE)
print((sum(1*(DTest == Pxc))/length(Pxc)))
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='red')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='red')
par(new=T)
k <- k + 1
}
}
aucResult
aucResult[i,j]
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), col='red')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), col='red')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), ylim=c(0,1), col='red')
par(new=T)
k <- k + 1
}
}
View(dataset)
View(data)
View(dataset)
table(data$V8)
data$V8 <- as.factor(data$V8)
data <- SMOTE(V8 ~ ., data, perc.over = 2000, perc.under=100)
table(data$V8)
