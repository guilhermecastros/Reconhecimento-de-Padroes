c(foldList[[2]],foldList[[3]])c(1:length(iFold)
c(1:length(iFold)
)
iFold <- 1:length(foldList)
iFold <- which(iFold != i)
iFold <- which(iFold != 1)
iFold
length(iFold)
iFold[1]
foldList[[2]]
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
i <- 1
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
XResult[j] <- knn(XTrain,XTest[j,],DTrain,K)
}
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain
DataTrain
View(DataTrain)
rep(null,1)
rep('',1)
rep(0,0)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(null,1)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
foldList <- list()
foldList <- createFolds(1:nrow(X), k = 10)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
DataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
View(X)
Y <- matrix(0, nrow = dim(X)[1], ncol = 2)
Y[which(BreastCancer$Class == 'benign'),1] <- 1
Y[which(BreastCancer$Class == 'malignant'),2] <- 1
Y
Y <- as.numeric(BreastCancer$Class)
BreastCancer
Data()
data()
rm(list=ls())
library('class')
library('caret')
library('mlbench')
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
evalK <- function(K) {
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(DTrain == DTest))/length(DTest))
}
bestResult <- max(results)
return (bestResult)
}
evalK(1)
DTrain
evalK <- function(K) {
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(tempResult == DTest))/length(DTest))
}
bestResult <- max(results)
return (bestResult)
}
evalK(1)
evalK
evalK(1)
K <- 1
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(tempResult == DTest))/length(DTest))
K <- 1
data(BreastCancer)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
foldList <- list()
foldList <- createFolds(1:nrow(X), 10)
results <- rep(0,length(foldList))
for(i in c(1:length(foldList))){
iFold <- 1:length(foldList)
#filtrar a lista
iFold <- which(iFold != i)
DataTrain <- rep(0,0)
for(j in c(1:length(iFold)))
{
iDataTrain <- c(DataTrain, foldList[[iFold[j]]])
}
DataTrain <- X[iDataTrain]
DTrain <- Y[iDataTrain]
DataTest <- X[foldList[[i]]]
DTest <- Y[foldList[[i]]]
tempResult <- knn(DataTrain,DataTest,DTrain,K)
results[i] <- (sum(1*(tempResult == DTest))/length(DTest))
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Exercício 8 - KNN/mainKNN.R', echo=TRUE)
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Balanceamento/mainBalanceamento.R', echo=TRUE)
setwd("C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Balanceamento")
source('C:/Users/Guilherme/Desktop/Desktop/UFMG/2017-2/Reconhecimento de Padrões/Balanceamento/mainBalanceamento.R', echo=TRUE)
View(accResult)
plot(accResult[1,1],xlim = c(-3,8), ylim=c(-3,8), col='blue')
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j],xlim = c(-3,8), ylim=c(-3,8), col='blue')
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j], col='blue')
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j], col='blue', PAR = T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j], col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j],xlim = c(0,400), ylim=c(0,1), col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j],xlim = c(0,400), ylim=c(0,1), col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j],xlim = '', '', col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j],xlim = '', ylim = '', col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j], ylim=c(0.8,1), col='blue')
par(new=T)
}
}
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(accResult[i,j], ylim=c(0.8,1), col='blue')
par(new=T)
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='blue')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='blue')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.9,1), col='blue')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.9,1), col='blue')
par(new=T)
k <- k + 1
}
}
max(accResult)
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), ylim=c(0.4,1), col='red')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.9,1), col='blue')
par(new=T)
k <- k + 1
}
}
max(aucResult)
which(accResult==max(accResult))
accResult
which(accResult==max(accResult))
which.max( accResult )
View(accResult)
linha 7 coluna 13
cost[7]
gamma[13]
View(aucResult)
cost[12]
gamma[12]
svm.model <- svm(DTrain ~ ., data = XTrain, cost = cost[7], gamma = gamma[13])
svm.pred <- predict(svm.model, XTest)
Pxc <- as.numeric(as.character(svm.pred))
#results[i] <- colAUC(svm.pred,DTest, plotROC=FALSE)
print((sum(1*(DTest == Pxc))/length(Pxc)))
svm.model <- svm(DTrain ~ ., data = XTrain, cost = 64, gamma = 0.0625)
svm.pred <- predict(svm.model, XTest)
Pxc <- as.numeric(as.character(svm.pred))
#results[i] <- colAUC(svm.pred,DTest, plotROC=FALSE)
print((sum(1*(DTest == Pxc))/length(Pxc)))
rm(list=ls())
library('bmp')
library('rgl')
library('caret')
library('mlbench')
library('RSNNS')
library('mclust')
library('plot3D')
library('e1071')
library('class')
library('caTools')
source('evalByAcc.R')
source('evalByAuc.R')
library('readr')
library('DMwR')
dataset <- read.csv("BaseCar", skip=1, header = FALSE)
data <- dataset[,2:8]
data$V8 <- as.factor(data$V8)
data <- SMOTE(V8 ~ ., data, perc.over = 2000, perc.under=100)
table(data$V8)
X <- data.matrix(data[,1:6])
X[is.na(X)] <- 0
Y <-  data.matrix(data[,7])
#N <- 100
#MSE <- rep(0,N)
#SD <- rep(0,N)
#percentage <- rep(0,N)
xc1 <- X[which(Y == 0),]
xc2 <- X[which(Y == 1),]
#Usar SVM
index <- sample(dim(xc1)[1])
numOfTrainXC1 <- round(dim(xc1)[1]*0.7)
numOfTestXC1 <- round(dim(xc1)[1]*0.3)
xc1Test <- xc1[index[1:numOfTestXC1],]
xc1Train <- xc1[index[(numOfTestXC1 + 1): dim(xc1)[1]],]
index <- sample(dim(xc2)[1])
numOfTrainXC2 <- round(dim(xc2)[1]*0.7)
numOfTestXC2 <- round(dim(xc2)[1]*0.3)
xc2Test <- xc2[index[1:numOfTestXC2],]
xc2Train <- xc2[index[(numOfTestXC2 + 1):dim(xc2)[1]],]
# formatando base de dados
XTest <-  rbind(xc1Test,xc2Test)
DTest <- c(rep(1,nrow(xc1Test)),rep(-1,nrow(xc2Test)))
DTest <- as.factor(DTest)
DTrain <- c(rep(1,nrow(xc1Train)),rep(-1,nrow(xc2Train)))
DTrain <- as.factor(DTrain)
#DTrain <- as.factor(DTrain)
XTrain <- rbind(xc1Train,xc2Train)
foldList <- list()
foldList <- createFolds(1:nrow(XTrain), 10)
N <- 100
cost <- c(2^-5,2^-4,2^-3,2^-2,2^-1,2^0,2^1,2^2,2^3,2^4,2^5,2^6,2^7,2^8,2^9,2^10,2^11,2^12,2^13,2^14,2^15)
gamma <- c(2^-15,2^-14,2^-13,2^-12,2^-11,2^-10,2^-9,2^-8,2^-7,2^-6,2^-5,2^-4,2^-3,2^-2,2^-1,2^0,2^1,2^2,2^3)
accResult <- matrix(0, nrow = length(cost), ncol = length(gamma))
aucResult <- matrix(0, nrow = length(cost), ncol = length(gamma))
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
#REALIZAR 30 VEZES PARA O DATA DE TESTE E FAZER A MÉDIA PARA SABER QUAL O MELHOR
accResult[i,j] <- evalByAcc(XTrain, DTrain, foldList, cost[i], gamma[j])
aucResult[i,j] <- evalByAuc(XTrain, DTrain, foldList, cost[i], gamma[j])
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='blue')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, accResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='blue')
par(new=T)
k <- k + 1
}
}
max(accResult)
View(accResult)
cost[5]
gamma[16]
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='red')
par(new=T)
k <- k + 1
}
}
k <- 1;
for(i in c(1:length(cost))) #c(1:length(cost)
{
for(j in c(1:length(gamma))) #length(gamma)
{
plot(k, aucResult[i,j],xlim = c(0,400), ylim=c(0.8,1), col='red')
par(new=T)
k <- k + 1
}
}
max(aucResult)
View(aucResult)
svm.model <- svm(DTrain ~ ., data = XTrain, cost = 0.5, gamma = 1)
svm.pred <- predict(svm.model, XTest)
Pxc <- as.numeric(as.character(svm.pred))
#results[i] <- colAUC(svm.pred,DTest, plotROC=FALSE)
print((sum(1*(DTest == Pxc))/length(Pxc)))
max(accResult)
max(aucResult)
cost[5]
gamma[16]
max(auc)
max(aucResult)
max(accResult)
View(accResult)
svm.model <- svm(DTrain ~ ., data = XTrain, cost = 0.5, gamma = 1)
svm.pred <- predict(svm.model, XTest)
Pxc <- as.numeric(as.character(svm.pred))
#results[i] <- colAUC(svm.pred,DTest, plotROC=FALSE)
print((sum(1*(DTest == Pxc))/length(Pxc)))
